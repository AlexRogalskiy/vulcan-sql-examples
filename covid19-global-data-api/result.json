{"templates":{"countries":"(() => {function root(env, context, frame, runtime, cb) {\nvar lineno = 0;\nvar colno = 0;\nvar output = \"\";\ntry {\nvar parentTemplate = null;\nenv.getExtension(\"req\")[\"__run\"](context,\"__wrapped__builder\",\"true\",function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_1 = \"\";t_1 += \"SELECT DISTINCT Country, Country_code, WHO_region FROM read_csv_auto('WHO-COVID-19-global-data.csv')\";\ncb(null, t_1);\n;\nreturn t_1;\n}\n, function(t_3,t_2) {\nif(t_3) { cb(t_3); return; }\noutput += runtime.suppressValue(t_2, true && env.opts.autoescape);\nif(parentTemplate) {\nparentTemplate.rootRenderFunc(env, context, frame, runtime, cb);\n} else {\ncb(null, output);\n}\n});\n} catch (e) {\n  cb(runtime.handleError(e, lineno, colno));\n}\n}\nreturn {\nroot: root\n};\n})()","max_cases":"(() => {function root(env, context, frame, runtime, cb) {\nvar lineno = 0;\nvar colno = 0;\nvar output = \"\";\ntry {\nvar parentTemplate = null;\nenv.getExtension(\"req\")[\"__run\"](context,\"__wrapped__builder\",\"true\",function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_1 = \"\";t_1 += \"-- set group_by variable given query parameter\\n\";\ncb(null, t_1);\n;\nreturn t_1;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_2 = \"\";var t_3;\nt_3 = env.getFilter(\"default\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"group_by\"),\"Country_code\");\nframe.set(\"group_by\", t_3, true);\nif(frame.topLevel) {\ncontext.setVariable(\"group_by\", t_3);\n}\nif(frame.topLevel) {\ncontext.addExport(\"group_by\", t_3);\n}\ncb(null, t_2);\n;\nreturn t_2;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_4 = \"\";t_4 += \"\\n\\n-- in this api, we only support WHO_region or Country_code as group_by value\\n-- otherwise, we will throw a 400 error with below message\\n\";\ncb(null, t_4);\n;\nreturn t_4;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_5 = \"\";(function(cb) {if(runtime.contextOrFrameLookup(context, frame, \"group_by\") && runtime.contextOrFrameLookup(context, frame, \"group_by\") != \"WHO_region\" && runtime.contextOrFrameLookup(context, frame, \"group_by\") != \"Country_code\") {\nt_5 += \"\\n    \";\nenv.getExtension(\"error\")[\"__run\"](context,\"group_by should be WHO_region or Country_code\",6,7, function(t_7,t_6) {\nif(t_7) { cb(t_7); return; }\nt_5 += runtime.suppressValue(t_6, true && env.opts.autoescape);\nt_5 += \"\\n\";\ncb()});\n}\nelse {\ncb()}\n})(function(t_8) {\nif(t_8) { cb(t_8); return; }cb(null, t_5);\n});\nreturn t_5;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_9 = \"\";t_9 += \"\\n\\n-- get maximum cases by country or WHO region given a date range\\nSELECT \\n    \";\ncb(null, t_9);\n;\nreturn t_9;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_10 = \"\";if(runtime.contextOrFrameLookup(context, frame, \"group_by\") == \"WHO_region\") {\nt_10 += \"\\n        WHO_region\\n    \";\n;\n}\nelse {\nt_10 += \"\\n        Country_code\\n    \";\n;\n}\ncb(null, t_10);\n;\nreturn t_10;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_11 = \"\";t_11 += \",\\n    SUM(New_cases) as Total_cases\\nFROM read_csv_auto('WHO-COVID-19-global-data.csv') \\nWHERE \\n    Date_reported >= \";\ncb(null, t_11);\n;\nreturn t_11;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_12 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"start_date\"), function(t_13,hole_1121) {\nif(t_13) { cb(t_13); return; }\nt_12 += runtime.suppressValue(hole_1121, env.opts.autoescape);\ncb(null, t_12);\n});\nreturn t_12;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_14 = \"\";t_14 += \" AND \\n    Date_reported <= \";\ncb(null, t_14);\n;\nreturn t_14;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_15 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"end_date\"), function(t_16,hole_1122) {\nif(t_16) { cb(t_16); return; }\nt_15 += runtime.suppressValue(hole_1122, env.opts.autoescape);\ncb(null, t_15);\n});\nreturn t_15;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_17 = \"\";t_17 += \"\\nGROUP BY \\n    \";\ncb(null, t_17);\n;\nreturn t_17;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_18 = \"\";if(runtime.contextOrFrameLookup(context, frame, \"group_by\") == \"WHO_region\") {\nt_18 += \"\\n        WHO_region\\n    \";\n;\n}\nelse {\nt_18 += \"\\n        Country_code\\n    \";\n;\n}\ncb(null, t_18);\n;\nreturn t_18;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_19 = \"\";t_19 += \"\\nORDER BY Total_cases DESC\\nLIMIT \";\ncb(null, t_19);\n;\nreturn t_19;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_20 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"top_n\"), function(t_21,hole_1123) {\nif(t_21) { cb(t_21); return; }\nt_20 += runtime.suppressValue(hole_1123, env.opts.autoescape);\ncb(null, t_20);\n});\nreturn t_20;\n}\n, function(t_23,t_22) {\nif(t_23) { cb(t_23); return; }\noutput += runtime.suppressValue(t_22, true && env.opts.autoescape);\nif(parentTemplate) {\nparentTemplate.rootRenderFunc(env, context, frame, runtime, cb);\n} else {\ncb(null, output);\n}\n});\n} catch (e) {\n  cb(runtime.handleError(e, lineno, colno));\n}\n}\nreturn {\nroot: root\n};\n})()","max_deaths":"(() => {function root(env, context, frame, runtime, cb) {\nvar lineno = 0;\nvar colno = 0;\nvar output = \"\";\ntry {\nvar parentTemplate = null;\nenv.getExtension(\"req\")[\"__run\"](context,\"__wrapped__builder\",\"true\",function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_1 = \"\";t_1 += \"-- set group_by variable given query parameter\\n\";\ncb(null, t_1);\n;\nreturn t_1;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_2 = \"\";var t_3;\nt_3 = env.getFilter(\"default\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"group_by\"),\"Country_code\");\nframe.set(\"group_by\", t_3, true);\nif(frame.topLevel) {\ncontext.setVariable(\"group_by\", t_3);\n}\nif(frame.topLevel) {\ncontext.addExport(\"group_by\", t_3);\n}\ncb(null, t_2);\n;\nreturn t_2;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_4 = \"\";t_4 += \"\\n\\n-- in this api, we only support WHO_region or Country_code as group_by value\\n-- otherwise, we will throw a 400 error with below message\\n\";\ncb(null, t_4);\n;\nreturn t_4;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_5 = \"\";(function(cb) {if(runtime.contextOrFrameLookup(context, frame, \"group_by\") && runtime.contextOrFrameLookup(context, frame, \"group_by\") != \"WHO_region\" && runtime.contextOrFrameLookup(context, frame, \"group_by\") != \"Country_code\") {\nt_5 += \"\\n    \";\nenv.getExtension(\"error\")[\"__run\"](context,\"group_by should be WHO_region or Country_code\",6,7, function(t_7,t_6) {\nif(t_7) { cb(t_7); return; }\nt_5 += runtime.suppressValue(t_6, true && env.opts.autoescape);\nt_5 += \"\\n\";\ncb()});\n}\nelse {\ncb()}\n})(function(t_8) {\nif(t_8) { cb(t_8); return; }cb(null, t_5);\n});\nreturn t_5;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_9 = \"\";t_9 += \"\\n\\n-- get maximum deaths by country or WHO region given a date range\\nSELECT \\n    \";\ncb(null, t_9);\n;\nreturn t_9;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_10 = \"\";if(runtime.contextOrFrameLookup(context, frame, \"group_by\") == \"WHO_region\") {\nt_10 += \"\\n        WHO_region\\n    \";\n;\n}\nelse {\nt_10 += \"\\n        Country_code\\n    \";\n;\n}\ncb(null, t_10);\n;\nreturn t_10;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_11 = \"\";t_11 += \",\\n    SUM(New_deaths) as Total_deaths\\nFROM read_csv_auto('WHO-COVID-19-global-data.csv') \\nWHERE \\n    Date_reported >= \";\ncb(null, t_11);\n;\nreturn t_11;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_12 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"start_date\"), function(t_13,hole_1124) {\nif(t_13) { cb(t_13); return; }\nt_12 += runtime.suppressValue(hole_1124, env.opts.autoescape);\ncb(null, t_12);\n});\nreturn t_12;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_14 = \"\";t_14 += \" AND \\n    Date_reported <= \";\ncb(null, t_14);\n;\nreturn t_14;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_15 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"end_date\"), function(t_16,hole_1125) {\nif(t_16) { cb(t_16); return; }\nt_15 += runtime.suppressValue(hole_1125, env.opts.autoescape);\ncb(null, t_15);\n});\nreturn t_15;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_17 = \"\";t_17 += \"\\nGROUP BY \\n    \";\ncb(null, t_17);\n;\nreturn t_17;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_18 = \"\";if(runtime.contextOrFrameLookup(context, frame, \"group_by\") == \"WHO_region\") {\nt_18 += \"\\n        WHO_region\\n    \";\n;\n}\nelse {\nt_18 += \"\\n        Country_code\\n    \";\n;\n}\ncb(null, t_18);\n;\nreturn t_18;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_19 = \"\";t_19 += \"\\nORDER BY Total_deaths DESC\\nLIMIT \";\ncb(null, t_19);\n;\nreturn t_19;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_20 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"top_n\"), function(t_21,hole_1126) {\nif(t_21) { cb(t_21); return; }\nt_20 += runtime.suppressValue(hole_1126, env.opts.autoescape);\ncb(null, t_20);\n});\nreturn t_20;\n}\n, function(t_23,t_22) {\nif(t_23) { cb(t_23); return; }\noutput += runtime.suppressValue(t_22, true && env.opts.autoescape);\nif(parentTemplate) {\nparentTemplate.rootRenderFunc(env, context, frame, runtime, cb);\n} else {\ncb(null, output);\n}\n});\n} catch (e) {\n  cb(runtime.handleError(e, lineno, colno));\n}\n}\nreturn {\nroot: root\n};\n})()","min_cases":"(() => {function root(env, context, frame, runtime, cb) {\nvar lineno = 0;\nvar colno = 0;\nvar output = \"\";\ntry {\nvar parentTemplate = null;\nenv.getExtension(\"req\")[\"__run\"](context,\"__wrapped__builder\",\"true\",function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_1 = \"\";t_1 += \"-- set group_by variable given query parameter\\n\";\ncb(null, t_1);\n;\nreturn t_1;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_2 = \"\";var t_3;\nt_3 = env.getFilter(\"default\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"group_by\"),\"Country_code\");\nframe.set(\"group_by\", t_3, true);\nif(frame.topLevel) {\ncontext.setVariable(\"group_by\", t_3);\n}\nif(frame.topLevel) {\ncontext.addExport(\"group_by\", t_3);\n}\ncb(null, t_2);\n;\nreturn t_2;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_4 = \"\";t_4 += \"\\n\\n-- in this api, we only support WHO_region or Country_code as group_by value\\n-- otherwise, we will throw a 400 error with below message\\n\";\ncb(null, t_4);\n;\nreturn t_4;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_5 = \"\";(function(cb) {if(runtime.contextOrFrameLookup(context, frame, \"group_by\") && runtime.contextOrFrameLookup(context, frame, \"group_by\") != \"WHO_region\" && runtime.contextOrFrameLookup(context, frame, \"group_by\") != \"Country_code\") {\nt_5 += \"\\n    \";\nenv.getExtension(\"error\")[\"__run\"](context,\"group_by should be WHO_region or Country_code\",6,7, function(t_7,t_6) {\nif(t_7) { cb(t_7); return; }\nt_5 += runtime.suppressValue(t_6, true && env.opts.autoescape);\nt_5 += \"\\n\";\ncb()});\n}\nelse {\ncb()}\n})(function(t_8) {\nif(t_8) { cb(t_8); return; }cb(null, t_5);\n});\nreturn t_5;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_9 = \"\";t_9 += \"\\n\\n-- get minimum cases by country or WHO region given a date range\\nSELECT \\n    \";\ncb(null, t_9);\n;\nreturn t_9;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_10 = \"\";if(runtime.contextOrFrameLookup(context, frame, \"group_by\") == \"WHO_region\") {\nt_10 += \"\\n        WHO_region\\n    \";\n;\n}\nelse {\nt_10 += \"\\n        Country_code\\n    \";\n;\n}\ncb(null, t_10);\n;\nreturn t_10;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_11 = \"\";t_11 += \",\\n    SUM(New_cases) as Total_cases\\nFROM read_csv_auto('WHO-COVID-19-global-data.csv') \\nWHERE \\n    Date_reported >= \";\ncb(null, t_11);\n;\nreturn t_11;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_12 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"start_date\"), function(t_13,hole_1127) {\nif(t_13) { cb(t_13); return; }\nt_12 += runtime.suppressValue(hole_1127, env.opts.autoescape);\ncb(null, t_12);\n});\nreturn t_12;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_14 = \"\";t_14 += \" AND \\n    Date_reported <= \";\ncb(null, t_14);\n;\nreturn t_14;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_15 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"end_date\"), function(t_16,hole_1128) {\nif(t_16) { cb(t_16); return; }\nt_15 += runtime.suppressValue(hole_1128, env.opts.autoescape);\ncb(null, t_15);\n});\nreturn t_15;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_17 = \"\";t_17 += \"\\nGROUP BY \\n    \";\ncb(null, t_17);\n;\nreturn t_17;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_18 = \"\";if(runtime.contextOrFrameLookup(context, frame, \"group_by\") == \"WHO_region\") {\nt_18 += \"\\n        WHO_region\\n    \";\n;\n}\nelse {\nt_18 += \"\\n        Country_code\\n    \";\n;\n}\ncb(null, t_18);\n;\nreturn t_18;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_19 = \"\";t_19 += \"\\nORDER BY Total_cases ASC\\nLIMIT \";\ncb(null, t_19);\n;\nreturn t_19;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_20 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"top_n\"), function(t_21,hole_1129) {\nif(t_21) { cb(t_21); return; }\nt_20 += runtime.suppressValue(hole_1129, env.opts.autoescape);\ncb(null, t_20);\n});\nreturn t_20;\n}\n, function(t_23,t_22) {\nif(t_23) { cb(t_23); return; }\noutput += runtime.suppressValue(t_22, true && env.opts.autoescape);\nif(parentTemplate) {\nparentTemplate.rootRenderFunc(env, context, frame, runtime, cb);\n} else {\ncb(null, output);\n}\n});\n} catch (e) {\n  cb(runtime.handleError(e, lineno, colno));\n}\n}\nreturn {\nroot: root\n};\n})()","min_deaths":"(() => {function root(env, context, frame, runtime, cb) {\nvar lineno = 0;\nvar colno = 0;\nvar output = \"\";\ntry {\nvar parentTemplate = null;\nenv.getExtension(\"req\")[\"__run\"](context,\"__wrapped__builder\",\"true\",function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_1 = \"\";t_1 += \"-- set group_by variable given query parameter\\n\";\ncb(null, t_1);\n;\nreturn t_1;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_2 = \"\";var t_3;\nt_3 = env.getFilter(\"default\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"group_by\"),\"Country_code\");\nframe.set(\"group_by\", t_3, true);\nif(frame.topLevel) {\ncontext.setVariable(\"group_by\", t_3);\n}\nif(frame.topLevel) {\ncontext.addExport(\"group_by\", t_3);\n}\ncb(null, t_2);\n;\nreturn t_2;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_4 = \"\";t_4 += \"\\n\\n-- in this api, we only support WHO_region or Country_code as group_by value\\n-- otherwise, we will throw a 400 error with below message\\n\";\ncb(null, t_4);\n;\nreturn t_4;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_5 = \"\";(function(cb) {if(runtime.contextOrFrameLookup(context, frame, \"group_by\") && runtime.contextOrFrameLookup(context, frame, \"group_by\") != \"WHO_region\" && runtime.contextOrFrameLookup(context, frame, \"group_by\") != \"Country_code\") {\nt_5 += \"\\n    \";\nenv.getExtension(\"error\")[\"__run\"](context,\"group_by should be WHO_region or Country_code\",6,7, function(t_7,t_6) {\nif(t_7) { cb(t_7); return; }\nt_5 += runtime.suppressValue(t_6, true && env.opts.autoescape);\nt_5 += \"\\n\";\ncb()});\n}\nelse {\ncb()}\n})(function(t_8) {\nif(t_8) { cb(t_8); return; }cb(null, t_5);\n});\nreturn t_5;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_9 = \"\";t_9 += \"\\n\\n-- get minimum deaths by country or WHO region given a date range\\nSELECT \\n    \";\ncb(null, t_9);\n;\nreturn t_9;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_10 = \"\";if(runtime.contextOrFrameLookup(context, frame, \"group_by\") == \"WHO_region\") {\nt_10 += \"\\n        WHO_region\\n    \";\n;\n}\nelse {\nt_10 += \"\\n        Country_code\\n    \";\n;\n}\ncb(null, t_10);\n;\nreturn t_10;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_11 = \"\";t_11 += \",\\n    SUM(New_deaths) as Total_deaths\\nFROM read_csv_auto('WHO-COVID-19-global-data.csv') \\nWHERE \\n    Date_reported >= \";\ncb(null, t_11);\n;\nreturn t_11;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_12 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"start_date\"), function(t_13,hole_1130) {\nif(t_13) { cb(t_13); return; }\nt_12 += runtime.suppressValue(hole_1130, env.opts.autoescape);\ncb(null, t_12);\n});\nreturn t_12;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_14 = \"\";t_14 += \" AND \\n    Date_reported <= \";\ncb(null, t_14);\n;\nreturn t_14;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_15 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"end_date\"), function(t_16,hole_1131) {\nif(t_16) { cb(t_16); return; }\nt_15 += runtime.suppressValue(hole_1131, env.opts.autoescape);\ncb(null, t_15);\n});\nreturn t_15;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_17 = \"\";t_17 += \"\\nGROUP BY \\n    \";\ncb(null, t_17);\n;\nreturn t_17;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_18 = \"\";if(runtime.contextOrFrameLookup(context, frame, \"group_by\") == \"WHO_region\") {\nt_18 += \"\\n        WHO_region\\n    \";\n;\n}\nelse {\nt_18 += \"\\n        Country_code\\n    \";\n;\n}\ncb(null, t_18);\n;\nreturn t_18;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_19 = \"\";t_19 += \"\\nORDER BY Total_deaths ASC\\nLIMIT \";\ncb(null, t_19);\n;\nreturn t_19;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_20 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"top_n\"), function(t_21,hole_1132) {\nif(t_21) { cb(t_21); return; }\nt_20 += runtime.suppressValue(hole_1132, env.opts.autoescape);\ncb(null, t_20);\n});\nreturn t_20;\n}\n, function(t_23,t_22) {\nif(t_23) { cb(t_23); return; }\noutput += runtime.suppressValue(t_22, true && env.opts.autoescape);\nif(parentTemplate) {\nparentTemplate.rootRenderFunc(env, context, frame, runtime, cb);\n} else {\ncb(null, output);\n}\n});\n} catch (e) {\n  cb(runtime.handleError(e, lineno, colno));\n}\n}\nreturn {\nroot: root\n};\n})()","reports":"(() => {function root(env, context, frame, runtime, cb) {\nvar lineno = 0;\nvar colno = 0;\nvar output = \"\";\ntry {\nvar parentTemplate = null;\nenv.getExtension(\"req\")[\"__run\"](context,\"__wrapped__builder\",\"true\",function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_1 = \"\";t_1 += \"-- set country_codes variable given query parameter\\n\";\ncb(null, t_1);\n;\nreturn t_1;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_2 = \"\";var t_3;\nt_3 = runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"country_code\");\nframe.set(\"country_codes\", t_3, true);\nif(frame.topLevel) {\ncontext.setVariable(\"country_codes\", t_3);\n}\nif(frame.topLevel) {\ncontext.addExport(\"country_codes\", t_3);\n}\ncb(null, t_2);\n;\nreturn t_2;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_4 = \"\";t_4 += \"\\n\\n-- get a list of COVID-19 reports given a date range and country codes(optional)\\nSELECT * FROM read_csv_auto('WHO-COVID-19-global-data.csv')\\nWHERE \\n    Date_reported >= \";\ncb(null, t_4);\n;\nreturn t_4;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_5 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"start_date\"), function(t_6,hole_1133) {\nif(t_6) { cb(t_6); return; }\nt_5 += runtime.suppressValue(hole_1133, env.opts.autoescape);\ncb(null, t_5);\n});\nreturn t_5;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_7 = \"\";t_7 += \" AND \\n    Date_reported <= \";\ncb(null, t_7);\n;\nreturn t_7;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_8 = \"\";env.getFilter(\"sanitize\").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, \"context\")),\"params\")),\"end_date\"), function(t_9,hole_1134) {\nif(t_9) { cb(t_9); return; }\nt_8 += runtime.suppressValue(hole_1134, env.opts.autoescape);\ncb(null, t_8);\n});\nreturn t_8;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_10 = \"\";t_10 += \"\\n\\n    \";\ncb(null, t_10);\n;\nreturn t_10;\n}\n,function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_11 = \"\";(function(cb) {if(runtime.contextOrFrameLookup(context, frame, \"country_codes\")) {\nt_11 += \"\\n    AND Country_code IN (SELECT UNNEST(string_split(\";\nenv.getFilter(\"sanitize\").call(context, runtime.contextOrFrameLookup(context, frame, \"country_codes\"), function(t_12,hole_1135) {\nif(t_12) { cb(t_12); return; }\nt_11 += runtime.suppressValue(hole_1135, env.opts.autoescape);\nt_11 += \", ',')))\\n    \";\ncb()});\n}\nelse {\ncb()}\n})(function(t_13) {\nif(t_13) { cb(t_13); return; }cb(null, t_11);\n});\nreturn t_11;\n}\n, function(t_15,t_14) {\nif(t_15) { cb(t_15); return; }\noutput += runtime.suppressValue(t_14, true && env.opts.autoescape);\nif(parentTemplate) {\nparentTemplate.rootRenderFunc(env, context, frame, runtime, cb);\n} else {\ncb(null, output);\n}\n});\n} catch (e) {\n  cb(runtime.handleError(e, lineno, colno));\n}\n}\nreturn {\nroot: root\n};\n})()","who_regions":"(() => {function root(env, context, frame, runtime, cb) {\nvar lineno = 0;\nvar colno = 0;\nvar output = \"\";\ntry {\nvar parentTemplate = null;\nenv.getExtension(\"req\")[\"__run\"](context,\"__wrapped__builder\",\"true\",function(cb) {\nif(!cb) { cb = function(err) { if(err) { throw err; }}}\nvar t_1 = \"\";t_1 += \"SELECT DISTINCT WHO_region FROM read_csv_auto('WHO-COVID-19-global-data.csv')\";\ncb(null, t_1);\n;\nreturn t_1;\n}\n, function(t_3,t_2) {\nif(t_3) { cb(t_3); return; }\noutput += runtime.suppressValue(t_2, true && env.opts.autoescape);\nif(parentTemplate) {\nparentTemplate.rootRenderFunc(env, context, frame, runtime, cb);\n} else {\ncb(null, output);\n}\n});\n} catch (e) {\n  cb(runtime.handleError(e, lineno, colno));\n}\n}\nreturn {\nroot: root\n};\n})()"},"schemas":[{"sourceName":"countries","urlPath":"/countries","description":"Get a list of countries and their country codes","response":[{"name":"Country","description":"country name","type":"STRING"},{"name":"Country_code","description":"country code","type":"STRING"},{"name":"WHO_region","description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"STRING"}],"profiles":["duckdb"],"metadata":{"error.vulcan.com":{"errorCodes":[]},"builder.vulcan.com":{"finalBuilderName":"FINAL_BUILDER"},"parameter.vulcan.com":[],"filter.vulcan.com":[],"cache.vulcan.com":{"isUsedTag":false}},"request":[],"templateSource":"countries","errors":[]},{"sourceName":"max_cases","urlPath":"/max_cases","description":"Get a list of countries or WHO regions that have the most cases on a given date range","request":[{"fieldName":"start_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"end_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"top_n","description":"Top N","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"group_by","description":"Group by, e.g. \"WHO_region\", \"Country_code\"; default value is \"Country_code\"","fieldIn":"QUERY","validators":[],"constraints":[],"type":"STRING"}],"response":[{"name":"Country_code","description":"country code","type":"STRING"},{"name":"Country","description":"country name","type":"STRING"},{"name":"WHO_region","description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"STRING"},{"name":"Total_cases","description":"total cases","type":"NUMBER"}],"profiles":["duckdb"],"metadata":{"error.vulcan.com":{"errorCodes":[{"code":"group_by should be WHO_region or Country_code","locations":[{"lineNo":6,"columnNo":13}]}]},"builder.vulcan.com":{"finalBuilderName":"FINAL_BUILDER"},"parameter.vulcan.com":[{"name":"group_by","locations":[{"lineNo":1,"columnNo":32}],"validators":[]},{"name":"start_date","locations":[{"lineNo":19,"columnNo":38}],"validators":[{"name":"required","args":{}}]},{"name":"end_date","locations":[{"lineNo":20,"columnNo":38}],"validators":[{"name":"required","args":{}}]},{"name":"top_n","locations":[{"lineNo":28,"columnNo":23}],"validators":[{"name":"required","args":{}}]}],"filter.vulcan.com":["default","sanitize"],"cache.vulcan.com":{"isUsedTag":false}},"templateSource":"max_cases","errors":[{"code":"group_by should be WHO_region or Country_code","message":""}]},{"sourceName":"max_deaths","urlPath":"/max_deaths","description":"Get a list of countries or WHO regions that have the most deaths on a given date range","request":[{"fieldName":"start_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"end_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"top_n","description":"Top N","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"group_by","description":"Group by, e.g. \"WHO_region\", \"Country_code\"; default value is \"Country_code\"","fieldIn":"QUERY","validators":[],"constraints":[],"type":"STRING"}],"response":[{"name":"Country_code","description":"country code","type":"STRING"},{"name":"Country","description":"country name","type":"STRING"},{"name":"WHO_region","description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"STRING"},{"name":"Total_deaths","description":"total deaths","type":"NUMBER"}],"profiles":["duckdb"],"metadata":{"error.vulcan.com":{"errorCodes":[{"code":"group_by should be WHO_region or Country_code","locations":[{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13}]}]},"builder.vulcan.com":{"finalBuilderName":"FINAL_BUILDER"},"parameter.vulcan.com":[{"name":"group_by","locations":[{"lineNo":1,"columnNo":32}],"validators":[]},{"name":"start_date","locations":[{"lineNo":19,"columnNo":38}],"validators":[{"name":"required","args":{}}]},{"name":"end_date","locations":[{"lineNo":20,"columnNo":38}],"validators":[{"name":"required","args":{}}]},{"name":"top_n","locations":[{"lineNo":28,"columnNo":23}],"validators":[{"name":"required","args":{}}]}],"filter.vulcan.com":["default","sanitize"],"cache.vulcan.com":{"isUsedTag":false}},"templateSource":"max_deaths","errors":[{"code":"group_by should be WHO_region or Country_code","message":""}]},{"sourceName":"min_cases","urlPath":"/min_cases","description":"Get a list of countries or WHO regions that have the minimum cases on a given date range","request":[{"fieldName":"start_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"end_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"top_n","description":"Top N","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"group_by","description":"Group by, e.g. \"WHO_region\", \"Country_code\"; default value is \"Country_code\"","fieldIn":"QUERY","validators":[],"constraints":[],"type":"STRING"}],"response":[{"name":"Country_code","description":"country code","type":"STRING"},{"name":"Country","description":"country name","type":"STRING"},{"name":"WHO_region","description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"STRING"},{"name":"Total_cases","description":"total cases","type":"NUMBER"}],"profiles":["duckdb"],"metadata":{"error.vulcan.com":{"errorCodes":[{"code":"group_by should be WHO_region or Country_code","locations":[{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13}]}]},"builder.vulcan.com":{"finalBuilderName":"FINAL_BUILDER"},"parameter.vulcan.com":[{"name":"group_by","locations":[{"lineNo":1,"columnNo":32}],"validators":[]},{"name":"start_date","locations":[{"lineNo":19,"columnNo":38}],"validators":[{"name":"required","args":{}}]},{"name":"end_date","locations":[{"lineNo":20,"columnNo":38}],"validators":[{"name":"required","args":{}}]},{"name":"top_n","locations":[{"lineNo":28,"columnNo":23}],"validators":[{"name":"required","args":{}}]}],"filter.vulcan.com":["default","sanitize"],"cache.vulcan.com":{"isUsedTag":false}},"templateSource":"min_cases","errors":[{"code":"group_by should be WHO_region or Country_code","message":""}]},{"sourceName":"min_deaths","urlPath":"/min_deaths","description":"Get a list of countries or WHO regions that have the minimum deaths on a given date range","request":[{"fieldName":"start_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"end_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"top_n","description":"Top N","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"group_by","description":"Group by, e.g. \"WHO_region\", \"Country_code\"; default value is \"Country_code\"","fieldIn":"QUERY","validators":[],"constraints":[],"type":"STRING"}],"response":[{"name":"Country_code","description":"country code","type":"STRING"},{"name":"Country","description":"country name","type":"STRING"},{"name":"WHO_region","description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"STRING"},{"name":"Total_deaths","description":"total deaths","type":"NUMBER"}],"profiles":["duckdb"],"metadata":{"error.vulcan.com":{"errorCodes":[{"code":"group_by should be WHO_region or Country_code","locations":[{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13}]}]},"builder.vulcan.com":{"finalBuilderName":"FINAL_BUILDER"},"parameter.vulcan.com":[{"name":"group_by","locations":[{"lineNo":1,"columnNo":32}],"validators":[]},{"name":"start_date","locations":[{"lineNo":19,"columnNo":38}],"validators":[{"name":"required","args":{}}]},{"name":"end_date","locations":[{"lineNo":20,"columnNo":38}],"validators":[{"name":"required","args":{}}]},{"name":"top_n","locations":[{"lineNo":28,"columnNo":23}],"validators":[{"name":"required","args":{}}]}],"filter.vulcan.com":["default","sanitize"],"cache.vulcan.com":{"isUsedTag":false}},"templateSource":"min_deaths","errors":[{"code":"group_by should be WHO_region or Country_code","message":""}]},{"sourceName":"reports","urlPath":"/reports","description":"Get a list of COVID-19 reports by country and date","request":[{"fieldName":"start_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"end_date","description":"YYYY-MM-DD","fieldIn":"QUERY","validators":[{"name":"required","args":{}}],"constraints":[{"__type":"Required"}],"type":"STRING"},{"fieldName":"country_code","description":"country code, a comma-separated string","fieldIn":"QUERY","validators":[],"constraints":[],"type":"STRING"}],"response":[{"name":"Date_reported","description":"date of report","type":"STRING"},{"name":"Country_code","description":"country code","type":"STRING"},{"name":"Country","description":"country name","type":"STRING"},{"name":"WHO_region","description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"STRING"},{"name":"New_cases","description":"new cases","type":"NUMBER"},{"name":"Cumulative_cases","description":"cumulative cases","type":"NUMBER"},{"name":"New_deaths","description":"new deaths","type":"NUMBER"},{"name":"Cumulative_deaths","description":"cumulative deaths","type":"NUMBER"}],"profiles":["duckdb"],"metadata":{"error.vulcan.com":{"errorCodes":[{"code":"group_by should be WHO_region or Country_code","locations":[{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13}]}]},"builder.vulcan.com":{"finalBuilderName":"FINAL_BUILDER"},"parameter.vulcan.com":[{"name":"country_code","locations":[{"lineNo":1,"columnNo":37}],"validators":[]},{"name":"start_date","locations":[{"lineNo":6,"columnNo":38}],"validators":[{"name":"required","args":{}}]},{"name":"end_date","locations":[{"lineNo":7,"columnNo":38}],"validators":[{"name":"required","args":{}}]}],"filter.vulcan.com":["default","sanitize"],"cache.vulcan.com":{"isUsedTag":false}},"templateSource":"reports","errors":[{"code":"group_by should be WHO_region or Country_code","message":""}]},{"sourceName":"who_regions","urlPath":"/who_regions","description":"Get a list of WHO regions","response":[{"name":"WHO_region","description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"STRING"}],"profiles":["duckdb"],"metadata":{"error.vulcan.com":{"errorCodes":[{"code":"group_by should be WHO_region or Country_code","locations":[{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13},{"lineNo":6,"columnNo":13}]}]},"builder.vulcan.com":{"finalBuilderName":"FINAL_BUILDER"},"parameter.vulcan.com":[],"filter.vulcan.com":["default","sanitize"],"cache.vulcan.com":{"isUsedTag":false}},"request":[],"templateSource":"who_regions","errors":[{"code":"group_by should be WHO_region or Country_code","message":""}]}],"specs":{"oas3":{"openapi":"3.0.3","info":{"title":"covid19-global-data-api","version":"0.2.0","description":"A starter Vulcan project"},"paths":{"/countries":{"get":{"operationId":"get/countries","summary":"/countries","description":"Get a list of countries and their country codes","responses":{"200":{"description":"The default response","content":{"application/json":{"schema":{"type":"object","properties":{"Country":{"description":"country name","type":"string"},"Country_code":{"description":"country code","type":"string"},"WHO_region":{"description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"string"}}}},"text/csv":{"schema":{"type":"string"}}}},"5XX":{"description":"Server error"}},"parameters":[]}},"/max_cases":{"get":{"operationId":"get/max_cases","summary":"/max_cases","description":"Get a list of countries or WHO regions that have the most cases on a given date range","responses":{"200":{"description":"The default response","content":{"application/json":{"schema":{"type":"object","properties":{"Country_code":{"description":"country code","type":"string"},"Country":{"description":"country name","type":"string"},"WHO_region":{"description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"string"},"Total_cases":{"description":"total cases","type":"number"}}}},"text/csv":{"schema":{"type":"string"}}}},"400":{"description":"Client error","content":{"application/json":{"schema":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"}}},"examples":{"group_by should be WHO_region or Country_code":{"description":"","value":{"code":"group_by should be WHO_region or Country_code","message":""}}}}}},"5XX":{"description":"Server error"}},"parameters":[{"name":"start_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"end_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"top_n","in":"query","schema":{"type":"string"},"required":true,"description":"Top N"},{"name":"group_by","in":"query","schema":{"type":"string"},"required":false,"description":"Group by, e.g. \"WHO_region\", \"Country_code\"; default value is \"Country_code\""}]}},"/max_deaths":{"get":{"operationId":"get/max_deaths","summary":"/max_deaths","description":"Get a list of countries or WHO regions that have the most deaths on a given date range","responses":{"200":{"description":"The default response","content":{"application/json":{"schema":{"type":"object","properties":{"Country_code":{"description":"country code","type":"string"},"Country":{"description":"country name","type":"string"},"WHO_region":{"description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"string"},"Total_deaths":{"description":"total deaths","type":"number"}}}},"text/csv":{"schema":{"type":"string"}}}},"400":{"description":"Client error","content":{"application/json":{"schema":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"}}},"examples":{"group_by should be WHO_region or Country_code":{"description":"","value":{"code":"group_by should be WHO_region or Country_code","message":""}}}}}},"5XX":{"description":"Server error"}},"parameters":[{"name":"start_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"end_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"top_n","in":"query","schema":{"type":"string"},"required":true,"description":"Top N"},{"name":"group_by","in":"query","schema":{"type":"string"},"required":false,"description":"Group by, e.g. \"WHO_region\", \"Country_code\"; default value is \"Country_code\""}]}},"/min_cases":{"get":{"operationId":"get/min_cases","summary":"/min_cases","description":"Get a list of countries or WHO regions that have the minimum cases on a given date range","responses":{"200":{"description":"The default response","content":{"application/json":{"schema":{"type":"object","properties":{"Country_code":{"description":"country code","type":"string"},"Country":{"description":"country name","type":"string"},"WHO_region":{"description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"string"},"Total_cases":{"description":"total cases","type":"number"}}}},"text/csv":{"schema":{"type":"string"}}}},"400":{"description":"Client error","content":{"application/json":{"schema":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"}}},"examples":{"group_by should be WHO_region or Country_code":{"description":"","value":{"code":"group_by should be WHO_region or Country_code","message":""}}}}}},"5XX":{"description":"Server error"}},"parameters":[{"name":"start_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"end_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"top_n","in":"query","schema":{"type":"string"},"required":true,"description":"Top N"},{"name":"group_by","in":"query","schema":{"type":"string"},"required":false,"description":"Group by, e.g. \"WHO_region\", \"Country_code\"; default value is \"Country_code\""}]}},"/min_deaths":{"get":{"operationId":"get/min_deaths","summary":"/min_deaths","description":"Get a list of countries or WHO regions that have the minimum deaths on a given date range","responses":{"200":{"description":"The default response","content":{"application/json":{"schema":{"type":"object","properties":{"Country_code":{"description":"country code","type":"string"},"Country":{"description":"country name","type":"string"},"WHO_region":{"description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"string"},"Total_deaths":{"description":"total deaths","type":"number"}}}},"text/csv":{"schema":{"type":"string"}}}},"400":{"description":"Client error","content":{"application/json":{"schema":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"}}},"examples":{"group_by should be WHO_region or Country_code":{"description":"","value":{"code":"group_by should be WHO_region or Country_code","message":""}}}}}},"5XX":{"description":"Server error"}},"parameters":[{"name":"start_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"end_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"top_n","in":"query","schema":{"type":"string"},"required":true,"description":"Top N"},{"name":"group_by","in":"query","schema":{"type":"string"},"required":false,"description":"Group by, e.g. \"WHO_region\", \"Country_code\"; default value is \"Country_code\""}]}},"/reports":{"get":{"operationId":"get/reports","summary":"/reports","description":"Get a list of COVID-19 reports by country and date","responses":{"200":{"description":"The default response","content":{"application/json":{"schema":{"type":"object","properties":{"Date_reported":{"description":"date of report","type":"string"},"Country_code":{"description":"country code","type":"string"},"Country":{"description":"country name","type":"string"},"WHO_region":{"description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"string"},"New_cases":{"description":"new cases","type":"number"},"Cumulative_cases":{"description":"cumulative cases","type":"number"},"New_deaths":{"description":"new deaths","type":"number"},"Cumulative_deaths":{"description":"cumulative deaths","type":"number"}}}},"text/csv":{"schema":{"type":"string"}}}},"400":{"description":"Client error","content":{"application/json":{"schema":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"}}},"examples":{"group_by should be WHO_region or Country_code":{"description":"","value":{"code":"group_by should be WHO_region or Country_code","message":""}}}}}},"5XX":{"description":"Server error"}},"parameters":[{"name":"start_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"end_date","in":"query","schema":{"type":"string"},"required":true,"description":"YYYY-MM-DD"},{"name":"country_code","in":"query","schema":{"type":"string"},"required":false,"description":"country code, a comma-separated string"}]}},"/who_regions":{"get":{"operationId":"get/who_regions","summary":"/who_regions","description":"Get a list of WHO regions","responses":{"200":{"description":"The default response","content":{"application/json":{"schema":{"type":"object","properties":{"WHO_region":{"description":"WHO region, e.g. \"AFRO\" for Africa, \"AMRO\" for Americas, \"EMRO\" for Eastern Mediterranean, \"EURO\" for Europe, \"SEARO\" for South-East Asia, \"WPRO\" for Western Pacific","type":"string"}}}},"text/csv":{"schema":{"type":"string"}}}},"400":{"description":"Client error","content":{"application/json":{"schema":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"}}},"examples":{"group_by should be WHO_region or Country_code":{"description":"","value":{"code":"group_by should be WHO_region or Country_code","message":""}}}}}},"5XX":{"description":"Server error"}},"parameters":[]}}}}}}